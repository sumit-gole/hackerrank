/*   Note: In this problem you must NOT generate any output on your own. Any such solution will be considered as being against the rules and its author will be disqualified. The output of your solution must be generated by the uneditable code provided for you in the solution template.

An important concept in Object-Oriented Programming is the open/closed principle, which means writing code that is open to extension but closed to modification. In other words, new functionality should be added by writing an extension for the existing code rather than modifying it and potentially breaking other code that uses it. This challenge simulates a real-life problem where the open/closed principle can and should be applied.

A Tree class implementing a rooted tree is provided in the editor. It has the following publicly available methods:

getValue(): Returns the value stored in the node.
getColor(): Returns the color of the node.
getDepth(): Returns the depth of the node. Recall that the depth of a node is the number of edges between the node and the tree’s root, so the tree’s root has depth 0 and each descendant node’s depth is equal to the depth of its parent node +1.
In this challenge, we treat the internal implementation of the tree as being closed to modification, so we cannot directly modify it; however, as with real-world situations, the implementation is written in such a way that it allows external classes to extend and build upon its functionality. More specifically, it allows objects of the TreeVis class (a Visitor Design Pattern) to visit the tree and traverse the tree structure via the accept method.

There are two parts to this challenge.

Part I: Implement Three Different Visitors
Each class has three methods you must write implementations for:

getResult(): Return an integer denoting the result, which is different for each class:

The SumInLeavesVisitor implementation must return the sum of the values in the tree’s leaves only.
The ProductRedNodesVisitor implementation must return the product of values stored in all red nodes, including leaves, computed modulo 109 + 7. Note that the product of zero values is equal to 1.
The FancyVisitor implementation must return the absolute difference between the sum of values stored in the tree’s non-leaf nodes at even depth and the sum of values stored in the tree’s green leaf nodes. Recall that zero is an even number.
visitNode(TreeNode node): Implement the logic responsible for visiting the tree’s non-leaf nodes such that the getResultmethod returns the correct result for the implementing class’ visitor.

visitLeaf(TreeLeaf leaf): Implement the logic responsible for visiting the tree’s leaf nodes such that the getResultmethod returns the correct result  for the implementing class’ visitor.
Part II: Read and Build the Tree
Read the n-node tree, where each node is numbered from 1 to n. The tree is given as a list of node values (), a list of node colors (), and a list of edges. Construct this tree as an instance of the Tree class. The tree is always rooted at node number .

Your implementations of the three visitor classes will be tested on the tree you built from the given input.

Input Format

The first line contains a single integer, , denoting the number of nodes in the tree. The second line contains  space-separated integers describing the respective values of x1,x2,…,xn. The third line contains n space-separated binary integers describing the respective values of c1,c2,…,cn. Each ci denotes the color of the ith node, where 0 denotes red and 1 denotes green. 
Each of the n – 1 subsequent lines contains two space-separated integers, ui and vi , describing an edge between nodes ui and vi .

Constraints

2 ≤ n ≤ 105

1 ≤ xi ≤ 103

ci ∈ {0,1}

1 ≤ vi,ui ≤ n

It is guaranteed that the tree is rooted at node 1.
Output Format

Do not print anything to stdout, as this is handled by locked stub code in the editor. The three getResult() methods provided for you must return an integer denoting the result for that class’ visitor (defined above). Note that the value returned by ProductRedNodesVisitor‘s getResult method must be computed modulo 109 + 7.

Sample Input

5
4 7 2 5 12
0 1 0 0 1
1 2
1 3
3 4
3 5
Sample Output

24
40
15    */

/////////////****************************************////////////////////////////////*******************************************//////////////////////////

class SumInLeavesVisitor extends TreeVis {
    private int result = 0;
    public int getResult() {
      	//implement this
        return result;
    }

    public void visitNode(TreeNode node) {
      	//implement this
    }

    public void visitLeaf(TreeLeaf leaf) {
      	result += leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {
    private long result = 1;
    private final int M = 1000000007;
    public int getResult() {
      	return (int) result;
    }

    public void visitNode(TreeNode node) {
      	if (node.getColor() == Color.RED) {
            result = (result * node.getValue()) % M;
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
      	if (leaf.getColor() == Color.RED) {
            result = (result * leaf.getValue()) % M;
        }
    }
}

class FancyVisitor extends TreeVis {
    private int nonLeafEvenDepthSum = 0;
    private int greenLeavesSum = 0;
    public int getResult() {
      	return Math.abs(nonLeafEvenDepthSum - greenLeavesSum);
    }

    public void visitNode(TreeNode node) {
    	if (node.getDepth() % 2 == 0) {
            nonLeafEvenDepthSum += node.getValue();
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
    	if (leaf.getColor() == Color.GREEN) {
            greenLeavesSum += leaf.getValue();
        }
    }
}

public class Solution {
    static int[] values;
    static Color[] colors;
    static ArrayList<Integer>[] edges;
    // each edges[i] holds arrayList of all nodes connnected to node i
    @SuppressWarnings("unchecked") 
    public static Tree solve() {
int n;
        TreeNode root;
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        values = new int[n];
        colors = new Color[n];
        for (int i = 0; i < n; i++)
            values[i] = sc.nextInt();
        for (int i = 0; i < n; i++)
            colors[i] = sc.nextInt() == 0 ? Color.RED : Color.GREEN;
        // initialize arraylists
        edges = (ArrayList<Integer>[]) new ArrayList[n + 1];
        for (int i = 1; i <= n; i++)
            edges[i] = new ArrayList<Integer>();
        // read the n- 1 edges and store them in both directions
        for (int i = 0; i < n - 1; i++) {
            int edgeNode1 = sc.nextInt();
            int edgeNode2 = sc.nextInt();
            edges[edgeNode1].add(edgeNode2);
            edges[edgeNode2].add(edgeNode1);
        }
        sc.close();
        root = new TreeNode(values[0], colors[0], 0); // root is always internal
        addChildren(root, 1);
        return root;    
        }
        public static void addChildren(Tree node, Integer nodeNumber) {
        // for all edges coming out of this node
        for (Integer otherNodeNumber : edges[nodeNumber]) {
            Tree otherNode;
            if (edges[otherNodeNumber].size() > 1)
                // new internal node
                otherNode = new TreeNode(values[otherNodeNumber - 1], colors[otherNodeNumber - 1], node.getDepth() + 1);
            else
                // new leaf
                otherNode = new TreeLeaf(values[otherNodeNumber - 1], colors[otherNodeNumber - 1], node.getDepth() + 1);
            ((TreeNode) node).addChild(otherNode);
            edges[otherNodeNumber].remove(nodeNumber); // remove reverse edge
            if (otherNode instanceof TreeNode)
                addChildren(otherNode, otherNodeNumber);
        }
    }


/////////////****************************************////////////////////////////////*******************************************//////////////////////////
